{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"Homework 2 Insurance Fraud","provenance":[],"collapsed_sections":[]},"kernelspec":{"name":"python3","display_name":"Python 3"},"accelerator":"GPU"},"cells":[{"cell_type":"code","metadata":{"id":"w1hDk9hDvOH7","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":51},"executionInfo":{"status":"ok","timestamp":1600382906265,"user_tz":420,"elapsed":69770,"user":{"displayName":"Saadan Mir","photoUrl":"","userId":"12839282580533033164"}},"outputId":"a28668fe-ad5e-40f7-c1ac-1f8789c9e192"},"source":["import pandas as pd\n","from sklearn.preprocessing import label_binarize\n","import numpy as np\n","from sklearn.model_selection import train_test_split\n","from sklearn.ensemble import RandomForestClassifier\n","from sklearn.tree import DecisionTreeClassifier\n","from sklearn.model_selection import GridSearchCV\n","from sklearn.model_selection import RandomizedSearchCV\n","from sklearn.model_selection import cross_val_score\n","from sklearn.metrics import classification_report, confusion_matrix\n","from sklearn.ensemble import GradientBoostingClassifier\n","\n","import warnings\n","warnings.filterwarnings(\"ignore\")\n","#Please ignore the warnings with version change\n","\n","from google.colab import drive\n","drive.mount('/gdrive')\n","#Change current working directory to gdrive\n","%cd /gdrive\n","\n"],"execution_count":2,"outputs":[{"output_type":"stream","text":["Mounted at /gdrive\n","/gdrive\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"BMwGQK7KAd7T","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":343},"executionInfo":{"status":"ok","timestamp":1600383040736,"user_tz":420,"elapsed":359,"user":{"displayName":"Saadan Mir","photoUrl":"","userId":"12839282580533033164"}},"outputId":"5f5d299f-c256-4efc-be7f-5c67d5349791"},"source":["trainfile = r'/gdrive/My Drive/CIS 508/Assignment 2/Insurance Fraud - TRAIN.csv'\n","trainData = pd.read_csv(trainfile) #creates a dataframe\n","testfile = r'/gdrive/My Drive/CIS 508/Assignment 2/Insurance Fraud - TEST.csv'\n","testData = pd.read_csv(testfile)  #creates a dataframe\n","\n","print(trainData.shape)\n","print(testData.shape)\n","\n","trainData.head()\n"],"execution_count":10,"outputs":[{"output_type":"stream","text":["(2999, 32)\n","(12918, 32)\n"],"name":"stdout"},{"output_type":"execute_result","data":{"text/html":["<div>\n","<style scoped>\n","    .dataframe tbody tr th:only-of-type {\n","        vertical-align: middle;\n","    }\n","\n","    .dataframe tbody tr th {\n","        vertical-align: top;\n","    }\n","\n","    .dataframe thead th {\n","        text-align: right;\n","    }\n","</style>\n","<table border=\"1\" class=\"dataframe\">\n","  <thead>\n","    <tr style=\"text-align: right;\">\n","      <th></th>\n","      <th>MONTH</th>\n","      <th>WEEKOFMONTH</th>\n","      <th>DAYOFWEEK</th>\n","      <th>MAKE</th>\n","      <th>ACCIDENTAREA</th>\n","      <th>DAYOFWEEKCLAIMED</th>\n","      <th>MONTHCLAIMED</th>\n","      <th>WEEKOFMONTHCLAIMED</th>\n","      <th>SEX</th>\n","      <th>MARITALSTATUS</th>\n","      <th>AGE</th>\n","      <th>FAULT</th>\n","      <th>POLICYTYPE</th>\n","      <th>VEHICLECATEGORY</th>\n","      <th>VEHICLEPRICE</th>\n","      <th>REPNUMBER</th>\n","      <th>DEDUCTIBLE</th>\n","      <th>DRIVERRATING</th>\n","      <th>DAYS_POLICY_ACCIDENT</th>\n","      <th>DAYS_POLICY_CLAIM</th>\n","      <th>PASTNUMBEROFCLAIMS</th>\n","      <th>AGEOFVEHICLE</th>\n","      <th>AGEOFPOLICYHOLDER</th>\n","      <th>POLICEREPORTFILED</th>\n","      <th>WITNESSPRESENT</th>\n","      <th>AGENTTYPE</th>\n","      <th>NUMBEROFSUPPLIMENTS</th>\n","      <th>ADDRESSCHANGE_CLAIM</th>\n","      <th>NUMBEROFCARS</th>\n","      <th>YEAR</th>\n","      <th>BASEPOLICY</th>\n","      <th>FRAUDFOUND</th>\n","    </tr>\n","  </thead>\n","  <tbody>\n","    <tr>\n","      <th>0</th>\n","      <td>Jul</td>\n","      <td>3</td>\n","      <td>Sunday</td>\n","      <td>Honda</td>\n","      <td>Rural</td>\n","      <td>Wednesday</td>\n","      <td>Jan</td>\n","      <td>4</td>\n","      <td>Male</td>\n","      <td>Married</td>\n","      <td>21</td>\n","      <td>Policy_Holder</td>\n","      <td>Sport-Collision</td>\n","      <td>Sport</td>\n","      <td>more_than_69000</td>\n","      <td>4</td>\n","      <td>400</td>\n","      <td>4</td>\n","      <td>more_than_30</td>\n","      <td>more_than_30</td>\n","      <td>none</td>\n","      <td>4_years</td>\n","      <td>26_to_30</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>External</td>\n","      <td>3_to_5</td>\n","      <td>no_change</td>\n","      <td>1-vehicle</td>\n","      <td>1994</td>\n","      <td>Collision</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>1</th>\n","      <td>Nov</td>\n","      <td>5</td>\n","      <td>Monday</td>\n","      <td>Mazda</td>\n","      <td>Urban</td>\n","      <td>Wednesday</td>\n","      <td>Dec</td>\n","      <td>1</td>\n","      <td>Male</td>\n","      <td>Single</td>\n","      <td>68</td>\n","      <td>Policy_Holder</td>\n","      <td>Sedan-All_Perils</td>\n","      <td>Sedan</td>\n","      <td>20000_to_29000</td>\n","      <td>9</td>\n","      <td>400</td>\n","      <td>3</td>\n","      <td>more_than_30</td>\n","      <td>more_than_30</td>\n","      <td>2_to_4</td>\n","      <td>5_years</td>\n","      <td>over_65</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>External</td>\n","      <td>none</td>\n","      <td>no_change</td>\n","      <td>1-vehicle</td>\n","      <td>1994</td>\n","      <td>All_Perils</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>2</th>\n","      <td>Jan</td>\n","      <td>1</td>\n","      <td>Monday</td>\n","      <td>Pontiac</td>\n","      <td>Urban</td>\n","      <td>Wednesday</td>\n","      <td>Jan</td>\n","      <td>1</td>\n","      <td>Male</td>\n","      <td>Married</td>\n","      <td>50</td>\n","      <td>Policy_Holder</td>\n","      <td>Sedan-All_Perils</td>\n","      <td>Sedan</td>\n","      <td>20000_to_29000</td>\n","      <td>8</td>\n","      <td>400</td>\n","      <td>2</td>\n","      <td>more_than_30</td>\n","      <td>more_than_30</td>\n","      <td>none</td>\n","      <td>7_years</td>\n","      <td>41_to_50</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>External</td>\n","      <td>none</td>\n","      <td>under_6_months</td>\n","      <td>1-vehicle</td>\n","      <td>1994</td>\n","      <td>All_Perils</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>3</th>\n","      <td>Dec</td>\n","      <td>1</td>\n","      <td>Monday</td>\n","      <td>Toyota</td>\n","      <td>Rural</td>\n","      <td>Tuesday</td>\n","      <td>May</td>\n","      <td>3</td>\n","      <td>Male</td>\n","      <td>Married</td>\n","      <td>39</td>\n","      <td>Policy_Holder</td>\n","      <td>Sedan-All_Perils</td>\n","      <td>Sedan</td>\n","      <td>30000_to_39000</td>\n","      <td>1</td>\n","      <td>400</td>\n","      <td>3</td>\n","      <td>more_than_30</td>\n","      <td>more_than_30</td>\n","      <td>none</td>\n","      <td>more_than_7</td>\n","      <td>36_to_40</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>External</td>\n","      <td>more_than_5</td>\n","      <td>under_6_months</td>\n","      <td>2-vehicles</td>\n","      <td>1994</td>\n","      <td>All_Perils</td>\n","      <td>Yes</td>\n","    </tr>\n","    <tr>\n","      <th>4</th>\n","      <td>Dec</td>\n","      <td>5</td>\n","      <td>Wednesday</td>\n","      <td>Pontiac</td>\n","      <td>Urban</td>\n","      <td>Wednesday</td>\n","      <td>Jan</td>\n","      <td>1</td>\n","      <td>Male</td>\n","      <td>Single</td>\n","      <td>43</td>\n","      <td>Policy_Holder</td>\n","      <td>Sedan-Collision</td>\n","      <td>Sedan</td>\n","      <td>40000_to_59000</td>\n","      <td>1</td>\n","      <td>400</td>\n","      <td>4</td>\n","      <td>more_than_30</td>\n","      <td>more_than_30</td>\n","      <td>2_to_4</td>\n","      <td>7_years</td>\n","      <td>36_to_40</td>\n","      <td>No</td>\n","      <td>No</td>\n","      <td>External</td>\n","      <td>more_than_5</td>\n","      <td>no_change</td>\n","      <td>1-vehicle</td>\n","      <td>1994</td>\n","      <td>Collision</td>\n","      <td>Yes</td>\n","    </tr>\n","  </tbody>\n","</table>\n","</div>"],"text/plain":["  MONTH  WEEKOFMONTH  DAYOFWEEK  ...  YEAR  BASEPOLICY FRAUDFOUND\n","0   Jul            3     Sunday  ...  1994   Collision        Yes\n","1   Nov            5     Monday  ...  1994  All_Perils        Yes\n","2   Jan            1     Monday  ...  1994  All_Perils        Yes\n","3   Dec            1     Monday  ...  1994  All_Perils        Yes\n","4   Dec            5  Wednesday  ...  1994   Collision        Yes\n","\n","[5 rows x 32 columns]"]},"metadata":{"tags":[]},"execution_count":10}]},{"cell_type":"code","metadata":{"id":"SWOTk6C1Ao45","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":443},"executionInfo":{"status":"error","timestamp":1600384108497,"user_tz":420,"elapsed":370,"user":{"displayName":"Saadan Mir","photoUrl":"","userId":"12839282580533033164"}},"outputId":"a242c124-0792-4367-8038-02d06a62de19"},"source":["#List of Categorical Features\n","categoricalFeatures = [\"MONTH\",'DAYOFWEEK', \"MAKE\", \"ACCIDENTAREA\", \"DAYOFWEEKCLAIMED\", 'MONTHCLAIMED', 'SEX', 'MARITALSTATUS', 'FAULT', 'POLICYTYPE', 'VEHICLECATEGORY', 'VEHICLEPRICE', 'DAYS_POLICY_ACCIDENT', 'DAYS_POLICY_CLAIM', 'PASTNUMBEROFCLAIMS', 'AGEOFVEHICLE', 'AGEOFPOLICYHOLDER', 'POLICEREPORTFILED', 'WITNESSPRESENT', 'AGENTTYPE', 'NUMBEROFSUPPLIMENTS', 'ADDRESSCHANGE_CLAIM', 'NUMBEROFCARS', 'BASEPOLICY']\n","\n","#Combine Train and test for one Hot Encoding\n","combined_Data = pd.concat([trainData,testData], keys=[0,1])\n","\n","#Do one Hot encoding for categorical features\n","combined_Data = pd.get_dummies(combined_Data,columns=categoricalFeatures)\n","\n","#Separate Train data and test data\n","trainData = combined_Data.xs(0)\n","testData = combined_Data.xs(1)\n","\n","y_train = trainData[\"FRAUDFOUND\"]\n","X_train = trainData.drop([\"FRAUDFOUND\"], axis=1) #extracting training data without the target column\n","y_test = testData[\"FRAUDFOUND\"]\n","X_test = testData.drop([\"FRAUDFOUND\"], axis=1) #extracting training data without the target column\n","\n"],"execution_count":13,"outputs":[{"output_type":"error","ename":"KeyError","evalue":"ignored","traceback":["\u001b[0;31m---------------------------------------------------------------------------\u001b[0m","\u001b[0;31mKeyError\u001b[0m                                  Traceback (most recent call last)","\u001b[0;32m<ipython-input-13-f213f98d96e7>\u001b[0m in \u001b[0;36m<module>\u001b[0;34m()\u001b[0m\n\u001b[1;32m      6\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m      7\u001b[0m \u001b[0;31m#Do one Hot encoding for categorical features\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m----> 8\u001b[0;31m \u001b[0mcombined_Data\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mpd\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mget_dummies\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mcombined_Data\u001b[0m\u001b[0;34m,\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mcategoricalFeatures\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m      9\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m     10\u001b[0m \u001b[0;31m#Separate Train data and test data\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/reshape/reshape.py\u001b[0m in \u001b[0;36mget_dummies\u001b[0;34m(data, prefix, prefix_sep, dummy_na, columns, sparse, drop_first, dtype)\u001b[0m\n\u001b[1;32m    866\u001b[0m             \u001b[0;32mraise\u001b[0m \u001b[0mTypeError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34m\"Input must be a list-like for parameter `columns`\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    867\u001b[0m         \u001b[0;32melse\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m--> 868\u001b[0;31m             \u001b[0mdata_to_encode\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mdata\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0mcolumns\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m    869\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m    870\u001b[0m         \u001b[0;31m# validate prefixes and separator to avoid silently dropping cols\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/frame.py\u001b[0m in \u001b[0;36m__getitem__\u001b[0;34m(self, key)\u001b[0m\n\u001b[1;32m   2804\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mis_iterator\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2805\u001b[0m                 \u001b[0mkey\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mlist\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 2806\u001b[0;31m             \u001b[0mindexer\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mloc\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_listlike_indexer\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mkey\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0maxis\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0;32mTrue\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m[\u001b[0m\u001b[0;36m1\u001b[0m\u001b[0;34m]\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   2807\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   2808\u001b[0m         \u001b[0;31m# take() does not accept boolean indexers\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_get_listlike_indexer\u001b[0;34m(self, key, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1551\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1552\u001b[0m         self._validate_read_indexer(\n\u001b[0;32m-> 1553\u001b[0;31m             \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mo\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_number\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mraise_missing\u001b[0m\u001b[0;34m=\u001b[0m\u001b[0mraise_missing\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1554\u001b[0m         )\n\u001b[1;32m   1555\u001b[0m         \u001b[0;32mreturn\u001b[0m \u001b[0mkeyarr\u001b[0m\u001b[0;34m,\u001b[0m \u001b[0mindexer\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;32m/usr/local/lib/python3.6/dist-packages/pandas/core/indexing.py\u001b[0m in \u001b[0;36m_validate_read_indexer\u001b[0;34m(self, key, indexer, axis, raise_missing)\u001b[0m\n\u001b[1;32m   1638\u001b[0m             \u001b[0;32mif\u001b[0m \u001b[0mmissing\u001b[0m \u001b[0;34m==\u001b[0m \u001b[0mlen\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0mindexer\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m:\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1639\u001b[0m                 \u001b[0maxis_name\u001b[0m \u001b[0;34m=\u001b[0m \u001b[0mself\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0mobj\u001b[0m\u001b[0;34m.\u001b[0m\u001b[0m_get_axis_name\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0maxis\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0;32m-> 1640\u001b[0;31m                 \u001b[0;32mraise\u001b[0m \u001b[0mKeyError\u001b[0m\u001b[0;34m(\u001b[0m\u001b[0;34mf\"None of [{key}] are in the [{axis_name}]\"\u001b[0m\u001b[0;34m)\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n\u001b[0m\u001b[1;32m   1641\u001b[0m \u001b[0;34m\u001b[0m\u001b[0m\n\u001b[1;32m   1642\u001b[0m             \u001b[0;31m# We (temporarily) allow for some missing keys with .loc, except in\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0;34m\u001b[0m\u001b[0m\n","\u001b[0;31mKeyError\u001b[0m: \"None of [Index(['MONTH', 'DAYOFWEEK', 'MAKE', 'ACCIDENTAREA', 'DAYOFWEEKCLAIMED',\\n       'MONTHCLAIMED', 'SEX', 'MARITALSTATUS', 'FAULT', 'POLICYTYPE',\\n       'VEHICLECATEGORY', 'VEHICLEPRICE', 'DAYS_POLICY_ACCIDENT',\\n       'DAYS_POLICY_CLAIM', 'PASTNUMBEROFCLAIMS', 'AGEOFVEHICLE',\\n       'AGEOFPOLICYHOLDER', 'POLICEREPORTFILED', 'WITNESSPRESENT', 'AGENTTYPE',\\n       'NUMBEROFSUPPLIMENTS', 'ADDRESSCHANGE_CLAIM', 'NUMBEROFCARS',\\n       'BASEPOLICY'],\\n      dtype='object')] are in the [columns]\""]}]},{"cell_type":"code","metadata":{"id":"-Yd724taAv3o","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1600386938370,"user_tz":420,"elapsed":561,"user":{"displayName":"Saadan Mir","photoUrl":"","userId":"12839282580533033164"}},"outputId":"b26bd1c6-5456-4a9d-c4c2-324b16f1bd4c"},"source":["#Decision Tree Classifier ========================================================================\n","#CONSTRUCT DEFAULT DECISION TREE AND OBTAIN RESPECTIVE ACCURACY \n","clf = DecisionTreeClassifier()\n","clf.fit(X_train, y_train)\n","clf_predict=clf.predict(X_test)\n","print(\"accuracy Score (testset) for Decision Tree:{0:6f}\".format(clf.score(X_test,y_test)))\n","print(\"Confusion Matrix for Decision Tree\")\n","print(confusion_matrix(y_test,clf_predict))\n","\n"],"execution_count":24,"outputs":[{"output_type":"stream","text":["accuracy Score (testset) for Decision Tree:0.880477\n","Confusion Matrix for Decision Tree\n","[[10929  1491]\n"," [   53   445]]\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"acymCZogA1B1","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":85},"executionInfo":{"status":"ok","timestamp":1600384375344,"user_tz":420,"elapsed":10575,"user":{"displayName":"Saadan Mir","photoUrl":"","userId":"12839282580533033164"}},"outputId":"2deee275-2cb4-49f5-d880-294753e56343"},"source":["#Hyperparameter tuning done for decision tree classifier\n","#do random search\n","print(\"RandomizedSearchCV-Decision tree\")\n","parameters={'min_samples_leaf' : range(10,100,10),'max_depth': range(5,30,5),'criterion':['gini','entropy']}\n","clf_random = RandomizedSearchCV(clf,parameters,n_iter=15,cv=5)\n","clf_random.fit(X_train, y_train)\n","grid_parm=clf_random.best_params_\n","print(grid_parm)\n","#Now do grid search\n","print(\"GridSearchCV-Decision tree\")\n","clf_grid = GridSearchCV(clf,parameters)\n","clf_grid.fit(X_train, y_train)\n","grid_parm1=clf_grid.best_params_\n","print(grid_parm1)\n","\n"],"execution_count":15,"outputs":[{"output_type":"stream","text":["RandomizedSearchCV-Decision tree\n","{'min_samples_leaf': 40, 'max_depth': 10, 'criterion': 'entropy'}\n","GridSearchCV-Decision tree\n","{'criterion': 'entropy', 'max_depth': 5, 'min_samples_leaf': 30}\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"EesI2Lc7A587","colab_type":"code","colab":{},"executionInfo":{"status":"ok","timestamp":1600384729880,"user_tz":420,"elapsed":383,"user":{"displayName":"Saadan Mir","photoUrl":"","userId":"12839282580533033164"}}},"source":["#Using the parameters obtained from HyperParameterTuning in the DecisionTreeClassifier\n","#Construct Decision Trees using the best parameters\n","clf = DecisionTreeClassifier(min_samples_leaf= 40, max_depth= 10, criterion= 'entropy')\n","clfr = DecisionTreeClassifier(criterion = 'entropy', max_depth= 5, min_samples_leaf= 30)\n","\n","clf.fit(X_train,y_train)\n","clf_predict = clf.predict(X_test)\n","clfr.fit(X_train,y_train)\n","clfr_predict = clfr.predict(X_test)\n","\n","\n"],"execution_count":18,"outputs":[]},{"cell_type":"code","metadata":{"id":"UW1oB-MjBAjK","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":408},"executionInfo":{"status":"ok","timestamp":1600385218936,"user_tz":420,"elapsed":1078,"user":{"displayName":"Saadan Mir","photoUrl":"","userId":"12839282580533033164"}},"outputId":"3566deae-4ff7-491b-ccfd-1a2c641a06d3"},"source":["#Obtain accuracy ,confusion matrix,classification report and AUC values for the result above.\n","print(\"accuracy Score (testset) after hypertuning randomized search for Decision Tree:{0:6f}\".format(clf.score(X_test,y_test)))\n","print()\n","\n","print(\"accuracy Score (testset) after hypertuning grid search for Decision Tree:{0:6f}\".format(clfr.score(X_test,y_test)))\n","print()\n","print(\"Confusion Matrix after hypertuning for Decision Tree\")\n","print(confusion_matrix(y_test,clf_predict))\n","print()\n","print(\"=== Classification Report ===\")\n","print(classification_report(y_test,clf_predict))\n","\n","print()\n","\n","clf_cv_score = cross_val_score(clf, X_train, y_train, cv=10, scoring=\"balanced_accuracy\")\n","print(clf_cv_score)\n","print('\\n')\n","\n","\n"],"execution_count":23,"outputs":[{"output_type":"stream","text":["accuracy Score (testset) after hypertuning randomized search for Decision Tree:0.907493\n","\n","accuracy Score (testset) after hypertuning grid search for Decision Tree:0.877380\n","\n","Confusion Matrix after hypertuning for Decision Tree\n","[[11578   842]\n"," [  353   145]]\n","\n","=== Classification Report ===\n","              precision    recall  f1-score   support\n","\n","          No       0.97      0.93      0.95     12420\n","         Yes       0.15      0.29      0.20       498\n","\n","    accuracy                           0.91     12918\n","   macro avg       0.56      0.61      0.57     12918\n","weighted avg       0.94      0.91      0.92     12918\n","\n","\n","[0.80961538 0.76153846 0.77980769 0.675      0.5875     0.5\n"," 0.5        0.5        0.5375     0.6025641 ]\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"M9KXPcUtBE_E","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":437},"executionInfo":{"status":"ok","timestamp":1599715514178,"user_tz":420,"elapsed":4465,"user":{"displayName":"Asim Roy","photoUrl":"","userId":"05146077416249051154"}},"outputId":"ca5aaf3b-b2c8-40c3-bcd1-bbb24397757d"},"source":["#Normal randomforest==============================================================================\n","#=================================================================================================\n","rand_parameters={'min_samples_leaf' : range(10,100,10),'max_depth': range(1,10,2),'max_features':[2,3,4],'n_estimators':[20,30,40]}\n","rfc = RandomForestClassifier()\n","rfc.fit(X_train, y_train)\n","rfc_predict=rfc.predict(X_test)\n","print(\"accuracy Score (testset) for RandomForest:{0:6f}\".format(rfc.score(X_test,y_test)))\n","print(\"Confusion Matrix for Random Forest:\")\n","print(confusion_matrix(y_test,rfc_predict))\n","#do random search with cross-validation\n","rfc_random = RandomizedSearchCV(rfc,rand_parameters,n_iter=15,cv=5)\n","rfc_random.fit(X_train, y_train)\n","grid_parm_rfc=rfc_random.best_params_\n","print(grid_parm_rfc)\n","#create new classifier using the best parameters\n","rfc= RandomForestClassifier(**grid_parm_rfc)\n","rfc.fit(X_train,y_train)\n","rfc_predict = rfc.predict(X_test)\n","print(\"accuracy Score (testset) after hypertuning for Random Forest:{0:6f}\".format(rfc.score(X_test,y_test)))\n","print(\"Confusion Matrix after hypertuning for Random Forest:\")\n","print(confusion_matrix(y_test,rfc_predict))\n","print(\"=== Classification Report ===\")\n","print(classification_report(y_test,rfc_predict))\n","rfc_cv_score = cross_val_score(rfc, X_train, y_train)\n","print(rfc_cv_score)\n","print('\\n')\n","\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["accuracy Score (testset) for RandomForest:0.955000\n","Confusion Matrix for Random Forest:\n","[[134   5   2]\n"," [  0 101   5]\n"," [  1   5 147]]\n","{'n_estimators': 30, 'min_samples_leaf': 20, 'max_features': 4, 'max_depth': 9}\n","accuracy Score (testset) after hypertuning for Random Forest:0.525000\n","Confusion Matrix after hypertuning for Random Forest:\n","[[109  10  22]\n"," [ 44  28  34]\n"," [ 67  13  73]]\n","=== Classification Report ===\n","              precision    recall  f1-score   support\n","\n","           1       0.50      0.77      0.60       141\n","           2       0.55      0.26      0.36       106\n","           3       0.57      0.48      0.52       153\n","\n","    accuracy                           0.53       400\n","   macro avg       0.54      0.50      0.49       400\n","weighted avg       0.54      0.53      0.51       400\n","\n","[0.52881356 0.50847458 0.53559322 0.54421769 0.48639456]\n","\n","\n"],"name":"stdout"}]},{"cell_type":"code","metadata":{"id":"r3D-s71uBJJJ","colab_type":"code","colab":{"base_uri":"https://localhost:8080/","height":437},"executionInfo":{"status":"ok","timestamp":1599715578860,"user_tz":420,"elapsed":6332,"user":{"displayName":"Asim Roy","photoUrl":"","userId":"05146077416249051154"}},"outputId":"9c9b12ed-81a3-481e-ee98-0435c5d42e40"},"source":["#Gradient Boosting================================================================================\n","search_grid={'n_estimators':[5,10,20],'learning_rate':[0.01,.1,.2],'min_samples_leaf' : range(10,100,10),'max_depth': range(1,10,2)}\n","abc =GradientBoostingClassifier()\n","abc.fit(X_train, y_train)\n","abc_predict=abc.predict(X_test)\n","print(\"accuracy Score (testset) for Boosting:{0:6f}\".format(abc.score(X_test,y_test)))\n","print(\"Confusion Matrix for boosting:\")\n","print(confusion_matrix(y_test,abc_predict))\n","abc_random = RandomizedSearchCV(abc,search_grid,n_iter=15)\n","abc_random.fit(X_train, y_train)\n","grid_parm_abc=abc_random.best_params_\n","print(grid_parm_abc)\n","abc= GradientBoostingClassifier(**grid_parm_abc)\n","abc.fit(X_train,y_train)\n","abc_predict = abc.predict(X_test)\n","print(\"accuracy Score (testset) after hypertuning for Boosting:{0:6f}\".format(abc.score(X_test,y_test)))\n","print(\"Confusion Matrix after hypertuning for Boosting:\")\n","print(confusion_matrix(y_test,abc_predict))\n","print(\"=== Classification Report ===\")\n","print(classification_report(y_test,abc_predict))\n","abc_cv_score = cross_val_score(abc, X_train, y_train)\n","print(abc_cv_score)\n","print('\\n')\n"],"execution_count":null,"outputs":[{"output_type":"stream","text":["accuracy Score (testset) for Boosting:0.647500\n","Confusion Matrix for boosting:\n","[[ 98  16  27]\n"," [ 20  52  34]\n"," [ 25  19 109]]\n","{'n_estimators': 10, 'min_samples_leaf': 70, 'max_depth': 5, 'learning_rate': 0.1}\n","accuracy Score (testset) after hypertuning for Boosting:0.565000\n","Confusion Matrix after hypertuning for Boosting:\n","[[ 97   3  41]\n"," [ 38  25  43]\n"," [ 38  11 104]]\n","=== Classification Report ===\n","              precision    recall  f1-score   support\n","\n","           1       0.56      0.69      0.62       141\n","           2       0.64      0.24      0.34       106\n","           3       0.55      0.68      0.61       153\n","\n","    accuracy                           0.56       400\n","   macro avg       0.58      0.53      0.52       400\n","weighted avg       0.58      0.56      0.54       400\n","\n","[0.54576271 0.5220339  0.56610169 0.60544218 0.54761905]\n","\n","\n"],"name":"stdout"}]}]}